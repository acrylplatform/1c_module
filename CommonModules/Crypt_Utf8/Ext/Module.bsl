///////////////////////////////////////////////////////////////////////////////////
//Модуль - Utf8 Клиент Сервер
//
// MIT License Copyright (c) 2020 AcrylPlatform.
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights 
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell 
// copies of the Software, and to permit persons to whom the Software 
// is furnished to do so, subject to the following conditions:
// The above copyright notice and this permission notice shall be 
// included in all copies or substantial portions of the Software.
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
// EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, 
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT 
// SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, 
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, 
// ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE 
// OR OTHER DEALINGS IN THE SOFTWARE.
//
///////////////////////////////////////////////////////////////////////////////////

///////////////////////////////////////////////////////////////////////////////////
#Область ПрограммныйИнтерфейс

// Функция - Строка в utf8 массив байт
//
// Параметры:
//  тСтрока	 - Строка - Строка в кодировки uft8
// 
// Возвращаемое значение:
// Массив  -  Массив байт построенный по строке uft8
//
Функция СтрокаВUtf8МассивБайт(Знач тСтрока) Экспорт
	
	МассивUtf8 = Новый Массив;
	
	сч = 1;
	
	Пока сч <= СтрДлина(тСтрока) Цикл 
		
		СимвольныйКод = КодСимвола(тСтрока, сч);
		
		Если СимвольныйКод < 128 Тогда
			
			МассивUtf8.Добавить(СимвольныйКод);
			
		ИначеЕсли СимвольныйКод < 2048 Тогда
			
			МассивUtf8.Добавить(ПобитовоеИли(192, ПобитовыйСдвигВправо(СимвольныйКод, 6)));
			МассивUtf8.Добавить(ПобитовоеИли(128, ПобитовоеИ(63, СимвольныйКод)));
			
		ИначеЕсли СимвольныйКод < 55296 ИЛИ СимвольныйКод > 57344 Тогда
			
			МассивUtf8.Добавить(ПобитовоеИли(224, ПобитовыйСдвигВправо(СимвольныйКод, 12)));
			МассивUtf8.Добавить(ПобитовоеИли(128, 
				ПобитовоеИ(ПобитовыйСдвигВправо(СимвольныйКод, 6), 63)));
			МассивUtf8.Добавить(ПобитовоеИ(128, ПобитовоеИ(СимвольныйКод, 63)));
			
		Иначе
			
			СимвольныйКод = 65536 + ПобитовоеИли(
				ПобитовыйСдвигВлево(ПобитовоеИ(СимвольныйКод, 1023), 10),
				ПобитовоеИ(КодСимвола(тСтрока, сч + 1), 1023));
				
			МассивUtf8.Добавить(ПобитовоеИли(240, ПобитовыйСдвигВправо(СимвольныйКод, 18)));
			
			МассивUtf8.Добавить(ПобитовоеИли(128, 
				ПобитовоеИ(ПобитовыйСдвигВправо(СимвольныйКод, 12),63)));
				
			МассивUtf8.Добавить(ПобитовоеИли(128,
				ПобитовоеИ(ПобитовыйСдвигВправо(СимвольныйКод, 6), 63)));
				
			МассивUtf8.Добавить(ПобитовоеИли(128, ПобитовоеИ(СимвольныйКод, 63)));

		КонецЕсли;
		
		сч = сч + 1;
		
	КонецЦикла;
	
	Возврат МассивUtf8;
	
КонецФункции

// Функция - Массив байт в utf8 строку
//
// Параметры:
//  мБайт	 - Массив - Массив байт строки формата utf8 
// 
// Возвращаемое значение:
// Строка  - строка раскодированная по массиву байт
//
Функция МассивБайтВUtf8Строку(Знач мБайт) Экспорт
		
	Байт = Неопределено;
	
	Код = Неопределено;
	
	Результат = "";
	
	сч = 0;
		
	Пока сч < мБайт.Количество() Цикл 
		
		Байт = мБайт[сч];
		
		Если Байт <= 127 Тогда 
			
			Код = Байт;
			
		ИначеЕсли Байт <= 223 Тогда
			
			Код = ПобитовоеИли(ПобитовыйСдвигВлево(ПобитовоеИ(Байт, 31), 6), ПобитовоеИ(мБайт[сч], 63));
			
			сч = сч + 1;
			
		ИначеЕсли Байт <= 239 Тогда 
			
			Код = ПобитовоеИли(ПобитовоеИли(ПобитовыйСдвигВлево(ПобитовоеИ(Байт, 15), 12), 
					ПобитовыйСдвигВлево(ПобитовоеИ(мБайт[сч + 1], 63), 6)),
					ПобитовоеИ(мБайт[сч + 2], 63));
					
			сч = сч + 2;
			
		Иначе
			
			Код = 63;
			
			сч = сч + 3;
			
		КонецЕсли;
		
		сч = сч + 1;
		
		Результат = Результат + Символ(Код);
		
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти
///////////////////////////////////////////////////////////////////////////////////