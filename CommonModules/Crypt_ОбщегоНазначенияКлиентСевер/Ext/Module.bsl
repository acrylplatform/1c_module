///////////////////////////////////////////////////////////////////////////////////
//Модуль - Общего назначения Клиент Сервер
//
// MIT License Copyright (c) 2020 AcrylPlatform.
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights 
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell 
// copies of the Software, and to permit persons to whom the Software 
// is furnished to do so, subject to the following conditions:
// The above copyright notice and this permission notice shall be 
// included in all copies or substantial portions of the Software.
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
// EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, 
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT 
// SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, 
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, 
// ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE 
// OR OTHER DEALINGS IN THE SOFTWARE.
//
///////////////////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////////////////////
#Область ПрограммныйИнтерфейс

///////////////////////////////////////////////////////////////////////////////////
#Область ОбщиеПроцедурыФункции

// Функция - Получить структуру ALPHABET
// 
// Возвращаемое значение:
// Структура  - Ключи струкруры: Строка, Массив
//
Функция ПолучитьСтруктуруALPHABET() Экспорт
	
	Результат = Новый Структура;
	
	Результат.Вставить("Строка", 
		"123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz");
	
	ALPHABET_СРазделителями = "1,2,3,4,5,6,7,8,9,A,B,C,D,E,F,G,H,J,K,"+
		"L,M,N,P,Q,R,S,T,U,V,W,X,Y,Z,a,b,c,d,e,f,g,h,i,j,k,m,n,o,p,q,r,s,t,u,v,w,x,y,z";
	
	Результат.Вставить("Массив", РазложитьСтрокуВМассив(ALPHABET_СРазделителями));
	
	Возврат Результат;
	
КонецФункции

// Функция - Округлить (аналог Math.Floor в js)
//
// Параметры:
//  Число	 - Число - Число для округления
// 
// Возвращаемое значение:
// Число  - Результат округления до меньшего числа
//
Функция Округлить(Знач Число) Экспорт
	
	Возврат ?(Число < 0, Цел(Число) - 1, Цел(Число));
	
КонецФункции

// Функция - Получение Случайного Числа
//
// Параметры
//  Мин  - Число - Нижняя граница Равномерного Распределения
//  Макс  - Число - Верхняя граница Равномерного Распределения
//
// Возвращаемое значение:
//   Число   - Сгенерированное случайное число
//
Функция ПолучитьСлучайноеЧисло(Мин=0, Макс=255) Экспорт

	//вместо Randomize 
	Для н = 1 По Макс Цикл
		
		Уник = Новый УникальныйИдентификатор;
		
	КонецЦикла; 

	//генерируем GUID 
	Уник = СокрЛП(Новый УникальныйИдентификатор); 

	//оставляем только цифры 
	Уник    = СтрЗаменить(Уник,"-","");
	Уник    = СтрЗаменить(Уник,Символы.НПП,"");

	Случ = 0;
	//знаменатель должен иметь такую же разрядность 
	Знаменатель = 1; 
	Для н = 1 По (СтрДлина(Уник)) Цикл
		
	    ТекС = Сред(Уник,н,1);
		
		Если ТекС="a" Тогда
			
	        Случ = Случ + Знаменатель*10;
			
		ИначеЕсли ТекС="b" Тогда
			
	        Случ = Случ + Знаменатель*11;
			
		ИначеЕсли ТекС="c" Тогда
			
	        Случ = Случ + Знаменатель*12;
			
		ИначеЕсли ТекС="d" Тогда
			
	        Случ = Случ + Знаменатель*13;
			
		ИначеЕсли ТекС="e" Тогда
			
	        Случ = Случ + Знаменатель*14;
			
		ИначеЕсли ТекС="f" Тогда
			
	        Случ = Случ + Знаменатель*15;
			
		ИначеЕсли ТекС="1" Тогда
			
	        Случ = Случ + Знаменатель;
			
		ИначеЕсли ТекС="2" Тогда
			
	        Случ = Случ + Знаменатель*2;
			
		ИначеЕсли ТекС="3" Тогда
			
	        Случ = Случ + Знаменатель*3;
			
	    ИначеЕсли ТекС="4" Тогда
			
	        Случ = Случ + Знаменатель*4;
			
		ИначеЕсли ТекС="5" Тогда
			
	        Случ = Случ + Знаменатель*5;
			
		ИначеЕсли ТекС="6" Тогда
			
	        Случ = Случ + Знаменатель*6;
			
		ИначеЕсли ТекС="7" Тогда
			
	        Случ = Случ + Знаменатель*7;
			
		ИначеЕсли ТекС="8" Тогда
			
	        Случ = Случ + Знаменатель*8;
			
		ИначеЕсли ТекС="9" Тогда
			
	        Случ = Случ + Знаменатель*9;
			
		КонецЕсли;
		
	    Знаменатель = Знаменатель * 16;
		
	КонецЦикла; 

	Случ = Случ / Знаменатель; //здесь получается дробное случайное число от 0 до 1 

	//преобразуем его в случайное число из заданного интервала, округляем до целого 
	ЧислоИзИнтервала = Мин(Макс(Окр(Мин + (Макс-Мин)*Случ),Мин),Макс); 

	Возврат ЧислоИзИнтервала; 

КонецФункции //ПолучитьСлучайноеЧисло()

// Функция - Получить timestamp
// 
// Возвращаемое значение:
// Число  -  timestamp
//
Функция ПолучитьTimestamp() Экспорт
	
	Возврат ТекущаяУниверсальнаяДатаВМиллисекундах() 
		+ ((Дата("00010101000000") - Дата("19700101000000")) * 1000);
	
КонецФункции

#КонецОбласти
////////////////////////////////////////////////////////////////////////////////////

///////////////////////////////////////////////////////////////////////////////////
#Область Массивы

// Функция - Разложить строку в массив
//
// Параметры:
//  Стр			 - Строка 		 - Строка с разделителями 
//  Разделитель	 - Разделитель	 - Разделитель подстрок
// 
// Возвращаемое значение:
// Массив  -  Массив подстрок
//
Функция РазложитьСтрокуВМассив(Знач Стр, Разделитель = ",") Экспорт
    
    Результат = Новый Массив;
    
    Строки = СтрЗаменить(Стр, Разделитель, Символы.ПС);
    
	Для Индекс = 1 По СтрЧислоСтрок(Строки) Цикл
		
        Результат.Добавить(СтрПолучитьСтроку(Строки, Индекс));
		
    КонецЦикла;
    
    Возврат Результат;
  
КонецФункции

// Функция - Разложить массив в строку
//
// Параметры:
//  Массив		 - Массив - Элементы которого разложим в строку
//  Разделитель	 - Строка - Разделитель элементов массива
// 
// Возвращаемое значение:
//  Строка - Строка из элементов массива, с раздилителями
//
Функция РазложитьМассивВСтроку(Знач Массив, Разделитель = ",") Экспорт
	
	СтрокаРезультат = "";
	
	Для Каждого ЭлементМассива Из Массив цикл
		
		СтрокаРезультат = СтрокаРезультат + СокрЛП(Строка(ЭлементМассива)) + Разделитель;
		
	КонецЦикла;
	
	СтрокаРезультат = Лев(СтрокаРезультат, СтрДлина(СтрокаРезультат) - 1);
	
	Возврат СтрокаРезультат;
	
КонецФункции

// Функция - Развернуть массив
//
// Параметры:
//  пМассив	 - Массив - Массив который необходимо развернуть
// 
// Возвращаемое значение:
// Массив - Массив с обратной последовательностью элементов
//
Функция РазвернутьМассив(Знач пМассив) Экспорт
	
	рМассив = Новый Массив;
	
	сч = пМассив.Количество() - 1;
	
	Пока сч > -1 Цикл 
		
		рМассив.Добавить(пМассив[сч]);
		
		сч = сч - 1;
		
	КонецЦикла;
	
	Возврат рМассив;
	
КонецФункции

// Функция - Объеденяет два массива в один
Функция СложитьМассивы(Знач СтруктураМассивов, ТолькоУникальные = Истина) Экспорт
	
	ИтогМассив = Новый Массив;

	Для Каждого КлючИЗначение Из СтруктураМассивов Цикл

		Если НЕ ТипЗнч(КлючИЗначение.Значение) = Тип("Массив") Тогда

			Продолжить;

		КонецЕсли;


		Для Каждого Элемент Из КлючИЗначение.Значение Цикл
			
			Если ТолькоУникальные Тогда
				
				Если ИтогМассив.Найти(Элемент) = Неопределено Тогда
					
					ИтогМассив.Добавить(Элемент);
					
				КонецЕсли;
				
			Иначе
				
				ИтогМассив.Добавить(Элемент);
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЦикла;

	Возврат ИтогМассив;
	
КонецФункции

// Функция - Суб массив
//
// Параметры:
//  Массив					 - Массив	 -  Массив на основании которого будет сформирован новый массив
//  НачальныйИндексЭлемента	 - Число	 -  Начальный индекс нового массива (Элементы до указаного инедкса не попадут в массив) 
// 
// Возвращаемое значение:
// Массив  - 
//
Функция СубМассив(Массив, НачальныйИндексЭлемента) Экспорт
	
	Результат = Новый Массив;
	
	Для сч = НачальныйИндексЭлемента По Массив.Количество() - 1 Цикл 
		
		Результат.Добавить(Массив[сч]);
				
	КонецЦикла;

	Возврат Результат;
	
КонецФункции

// Процедура - Создать суб массив, процедура создает субмассив типизированного массива
//
// Параметры:
//  Массив					 - Структура - Типизированный массив
//  НачальныйИндексЭлемента	 - Число	 - Число элементов
//  КонечныйИндекс			 - Число	 - Индекс элемента по который будет сформирован субмассив (конецчный индекс не включается в массив)
//
Процедура СоздатьСубМассив(Массив, НачальныйИндексЭлемента, КонечныйИндексЭлемента = Неопределено) Экспорт
	
	Если ТипЗнч(Массив) <> ТипЗнч(Новый Структура) Тогда 
		
		ВызватьИсключение  "Функция СубМассив обрабатывает только типизированные массивы";	
		
	Иначе
		
		ДанныеМассива = Crypt_ТипизированныеМассивы.ПолучитьДанныеМассива(Массив).Данные;	
		
	КонецЕсли;
	
	Если КонечныйИндексЭлемента = Неопределено Тогда 
		
		КонечныйИндексЭлемента = ДанныеМассива.Количество();
		
	КонецЕсли;
	
	Результат = Новый Массив;
	
	Для сч = НачальныйИндексЭлемента По КонечныйИндексЭлемента - 1 Цикл 
		
		Результат.Добавить(ДанныеМассива[сч]);
				
	КонецЦикла;
	
	Массив.Вставить("СубМассив", Результат);
	Массив.Вставить("НачальныйИндексЭлемента", НачальныйИндексЭлемента);
	Массив.Вставить("КонечныйИндексЭлемента", КонечныйИндексЭлемента);
	
КонецПроцедуры

// Процедура - Применяет субмассив, к основному массиву, удаляя субмассив.
//
// Параметры:
//  Массив	 - Структура	 - Типизированный массив
//
Процедура ПрименитьСубМассив(Массив) Экспорт 
	
	Если ТипЗнч(Массив) <> ТипЗнч(Новый Структура) Тогда 
		
		ВызватьИсключение  "Функция СубМассив обрабатывает только типизированные массивы";	
		
	Иначе
		
		ДанныеМассива = Crypt_ТипизированныеМассивы.ПолучитьДанныеМассива(Массив).Данные;	
		
	КонецЕсли;

	Если Массив.Свойство("СубМассив") И Массив.Свойство("НачальныйИндексЭлемента") 
	И	 Массив.Свойство("КонечныйИндексЭлемента") Тогда 
		
		счч = 0;
		
		Для сч = Массив.НачальныйИндексЭлемента По Массив.КонечныйИндексЭлемента - 1 Цикл 
			
			ДанныеМассива[сч] = Массив.СубМассив[счч];
			
			счч = счч + 1;
			
		КонецЦикла;
		
		Массив.Удалить("СубМассив");
		Массив.Удалить("НачальныйИндексЭлемента");
		Массив.Удалить("КонечныйИндексЭлемента");
		
	КонецЕсли;
	
КонецПроцедуры

// Функция - Обрезать массив
//
// Параметры:
//  Массив			 - Массив	 - Массив из элементов указанного диапазона
//  НачальнаяПозиция - Число	 - Начальная позиция нового массива
//  КонечнаяПозиция	 - Число	 - Конечная позиция нового массива
// 
// Возвращаемое значение:
// Массив  - Выборка элементов по диапазону
//
Функция ОбрезатьМассив(Знач Массив, Знач НачальнаяПозиция, Знач КонечнаяПозиция = Неопределено) Экспорт
	
	Результат = Новый Массив;
	
	Если КонечнаяПозиция = Неопределено Тогда 
		
		КонечнаяПозиция = Массив.Количество();
		
	КонецЕсли;
	
	Для сч = НачальнаяПозиция По Массив.Количество() Цикл
		
		Если КонечнаяПозиция <= сч Тогда 
			
			Прервать;
			
		КонецЕсли;
				
		Результат.Добавить(Массив[сч]);
					
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти
///////////////////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////////////////////
#Область ПобитовыеОперации

// Функция - Двоичное представление десятичного числа
//
// Параметры:
//  Число		 - Число - Целое число (Поддерживает отрицательные числа)
//  Разрядность	 - Число - Число байт для представления числа
// 
// Возвращаемое значение:
// Строка  -  Двоичное представление числа
//
Функция ДвоичноеПредставлениеДесятичногоЧисла(Знач Число, Разрядность = 32) Экспорт 
	
	СтрНулей = "000000000000000000000000000000000000000000000000000000000000000";
	
	Результат="";
	
	Если Число(Число) = 0 Тогда 
				
		Возврат Прав(СтрНулей, Разрядность);
		
	КонецЕсли;
	
	Значение = Макс(-Число, Число);
 	
	Пока Значение > 0 Цикл
		
		врЗначение = Значение / 2;
		
		Значение = Цел(врЗначение);
		
		Результат = ?(врЗначение = Значение, "0", "1") + Результат;	
		
	КонецЦикла;
	
	оРезультат = "";
	
	Если Разрядность > СтрДлина(Результат) Тогда 
			
		Результат = Сред(СтрНулей, 1, Разрядность - СтрДлина(Результат)) + Результат;
		
	КонецЕсли;
	
	Если Число < 0 Тогда 
	
		Для сч = 1 По СтрДлина(Результат) Цикл
				
			оРезультат = оРезультат + ?(Сред(Результат, сч, 1) = "1", "0", "1");
			
		КонецЦикла;
		
		сч = СтрДлина(оРезультат);
		
		счч = 0;
		
		Пока сч <> 0 Цикл
				
			Если Сред(оРезультат, сч, 1) = "0" тогда
				
				оРезультат = Лев(оРезультат, сч - 1) + "1";
				
				Для ин = 1 По  счч Цикл
					
					оРезультат = оРезультат + "0";	
					
				КонецЦикла;
				
				Прервать;
				
			Иначе
				
				счч = счч + 1;
				
				сч = сч - 1;
				
			КонецЕсли;
			                                         
		КонецЦикла;

	Иначе
		
		оРезультат = Результат;
		
	КонецЕсли;
	
	Возврат оРезультат;
	
КонецФункции

// Функция - Десятичное представление двоичного числа
//
// Параметры:
//  Число		 - Строка - Строка содержащие двоичное представление числа
//  Беззнаковое	 - Булево - Требуется учитывать знак числа
// 
// Возвращаемое значение:
// Число  -  Целое, десятичное число
//
Функция ДесятичноеПредставлениеДвоичногоЧисла(Знач Число, Беззнаковое = Истина) Экспорт 
	
	чРезультат=0;
	
	Множитель = 1;
	
	Если Не Беззнаковое Тогда 
		
		нЧисло = "";
		
		Если Лев(Число, 1) = "1" Тогда
			
			Множитель = -1;
			
			Для сч = 1 По СтрДлина(Число) Цикл
				
				нЧисло = нЧисло + ?((Сред(Число, сч, 1) = "1"), 0, 1);
				
			КонецЦикла;		
			
			сч = СтрДлина(нЧисло);
			
			счч = 0;
			
			Пока сч <> 0 Цикл
					
				Если Сред(нЧисло, сч, 1) = "0" тогда
					
					нЧисло = Лев(нЧисло, сч - 1) + "1";
					
					Для ин = 1 По  счч Цикл
						
						нЧисло = нЧисло + "0";	
						
					КонецЦикла;
					
					Прервать;
					
				Иначе
					
					счч = счч + 1;
					
					сч = сч - 1;
					
				КонецЕсли;
				                                         
			КонецЦикла;
			
			Число = нЧисло; 
			
		КонецЕсли;
		
	КонецЕсли;

	чРезультат = ЧислоИзДвоичнойСтроки("0b" + Число);
	 	  
    Возврат Окр(чРезультат) * Множитель;
	
КонецФункции

// Функция - Побитовый сдвиг вправо с заполнением нулями (Аналог >>> в js)
//
// Параметры:
//  Число		 - Число - Целое Число над которым выполняется операция (Поддерживаются операции над отрицательными числами)
//  Смещение	 - Число - Значение смещения
//  Разрядность	 - Число - Число байт для представления числа 
//  Беззнаковое	 - Булево - Требуется учитывать знак числа 
// 
// Возвращаемое значение:
// Число  -  Результат операции
//
Функция ПобитовыйСдвигВправоСЗаполнениемНулями(Число, Смещение, Разрядность = 32, Беззнаковое = Истина) Экспорт
	
	оРезультат = ДвоичноеПредставлениеДесятичногоЧисла(Число, Разрядность);	
	
	Значение = Макс(-Число, Число);
	
	Если Значение = Число Тогда 
		
		Возврат ПобитовыйСдвигВправо(Число, Смещение);
		
	КонецЕсли;
	

	
	Для сч = 1 По Разрядность - СтрДлина(оРезультат) Цикл
		
		оРезультат = "1" + оРезультат;		
		
	КонецЦикла;

	
	оРезультат = Лев(оРезультат, СтрДлина(оРезультат) - Смещение);
	
	
	Для сч = 1 По Смещение Цикл
		
		оРезультат = "0" + оРезультат;		
		
	КонецЦикла;
	
		
	Возврат ДесятичноеПредставлениеДвоичногоЧисла(оРезультат, Беззнаковое);
	
КонецФункции

// Функция - Побитовый сдвиг влево (Аналог << в js)
//
// Параметры:
//  Число		 - Число - Целое Число над которым выполняется операция (Поддерживаются операции над отрицательными числами)
//  Смещение	 - Число - Значение смещения
//  Разрядность	 - Число - Число байт для представления числа 
//  Беззнаковое	 - Булево - Требуется учитывать знак числа 
// 
// Возвращаемое значение:
// Число  -  Результат операции
//
Функция пСдвигВлево(Число, Смещение, Разрядность = 32, Беззнаковое = Истина) Экспорт 
	
	Результат = Неопределено;
	
	Если Число > 0 Тогда 
		
		двЧисло = ДвоичноеПредставлениеДесятичногоЧисла(ПобитовыйСдвигВлево(Число, Смещение), Разрядность);
		
		Результат = ДесятичноеПредставлениеДвоичногоЧисла(двЧисло, Беззнаковое);
		
	Иначе
		
		Результат = ДесятичноеПредставлениеДвоичногоЧисла(
			ДвоичноеПредставлениеДесятичногоЧисла(Число * Pow(2, Смещение), Разрядность),
				Беззнаковое); 
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// Функция - Побитовый сдвиг вправо (Аналог >> в js)
//
// Параметры:
//  Число		 - Число - Целое Число над которым выполняется операция (Поддерживаются операции над отрицательными числами)
//  Смещение	 - Число - Значение смещения
//  Разрядность	 - Число - Число байт для представления числа 
//  Беззнаковое	 - Булево - Требуется учитывать знак числа 
// 
// Возвращаемое значение:
// Число  -  Результат операции
//
Функция пСдвигВправо(Число, Смещение, Разрядность = 32, Беззнаковое = Истина) Экспорт 
	
	Результат = Неопределено;
	
	Если Число > 0 Тогда 
		
		Результат = ДесятичноеПредставлениеДвоичногоЧисла(
			ДвоичноеПредставлениеДесятичногоЧисла(ПобитовыйСдвигВправо(Число, Смещение), 
				Разрядность), Беззнаковое);
		
	Иначе
		
		рСдвига = Число / Pow(2, Смещение);
		
		рСдвига = ?(рСдвига < 0, Цел(рСдвига) - 1, Окр(рСдвига)); 		
		
		Результат = ДесятичноеПредставлениеДвоичногоЧисла(
			ДвоичноеПредставлениеДесятичногоЧисла(рСдвига, Разрядность), Беззнаковое); 
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// Функция - Побитовое исключительное или (Аналог ^ в js)
//
// Параметры:
//  Число1		 - Число - Целое Число над которым выполняется операция (Поддерживаются операции над отрицательными числами)
//  Число2		 - Число - Целое Число над которым выполняется операция (Поддерживаются операции над отрицательными числами)
//  Разрядность	 - Число - Число байт для представления числа 
//  Беззнаковое	 - Булево - Требуется учитывать знак числа 
// 
// Возвращаемое значение:
// Число  -  Результат операции
//
Функция пИсключительноеИли(Число1, Число2, Разрядность = 32, Беззнаковое = Истина) Экспорт

	Если Число1 = 0 Тогда
		
		Возврат Число2;
		
	ИначеЕсли Число2 = 0 Тогда
		
		Возврат Число1;

	КонецЕсли;
	
	дЧисло1 = ДвоичноеПредставлениеДесятичногоЧисла(Число1, Разрядность);
	
	дЧисло2 = ДвоичноеПредставлениеДесятичногоЧисла(Число2, Разрядность);
		
	Результат = "";
	
	Для сч = 1 по Разрядность Цикл
		
		Результат = Результат + ?(Сред(дЧисло1, сч, 1) = Сред(дЧисло2, сч, 1), "0", "1")	
		
	КонецЦикла;
	
	Возврат ДесятичноеПредставлениеДвоичногоЧисла(Результат, Беззнаковое);
	
КонецФункции	

// Функция - Побитовое и (Аналог & в js)
//
// Параметры:
//  Число1		 - Число - Целое Число над которым выполняется операция (Поддерживаются операции над отрицательными числами)
//  Число2		 - Число - Целое Число над которым выполняется операция (Поддерживаются операции над отрицательными числами)
//  Разрядность	 - Число - Число байт для представления числа 
//  Беззнаковое	 - Булево - Требуется учитывать знак числа 
// 
// Возвращаемое значение:
// Число  -  Результат операции
Функция пИ(Число1, Число2, Разрядность = 32, Беззнаковое = Истина) Экспорт 
	
	дЧисло1 = ДвоичноеПредставлениеДесятичногоЧисла(Число1, Разрядность);
	
	дЧисло2 = ДвоичноеПредставлениеДесятичногоЧисла(Число2, Разрядность);
		
	Результат = "";
	
	Для сч = 1 по Разрядность Цикл
		
		Результат = Результат + ?((Сред(дЧисло1, сч, 1) = Сред(дЧисло2, сч, 1) и Сред(дЧисло1, сч, 1) = "1"), "1", "0")	
		
	КонецЦикла;
	
	Возврат ДесятичноеПредставлениеДвоичногоЧисла(Результат, Беззнаковое);

	
КонецФункции

// Функция - Побитовое или (Аналог | в js)
//
// Параметры:
//  Число1		 - Число - Целое Число над которым выполняется операция (Поддерживаются операции над отрицательными числами)
//  Число2		 - Число - Целое Число над которым выполняется операция (Поддерживаются операции над отрицательными числами)
//  Разрядность	 - Число - Число байт для представления числа 
//  Беззнаковое	 - Булево - Требуется учитывать знак числа 
// 
// Возвращаемое значение:
// Число  -  Результат операции
Функция пИли(Число1, Число2, Разрядность = 32, Беззнаковое = Истина) Экспорт 
	
	дЧисло1 = ДвоичноеПредставлениеДесятичногоЧисла(Число1, Разрядность);
	
	дЧисло2 = ДвоичноеПредставлениеДесятичногоЧисла(Число2, Разрядность);
		
	Результат = "";
	
	Для сч = 1 по Разрядность Цикл
		
		Результат = Результат + ?(((Сред(дЧисло1, сч, 1) = "1") Или (Сред(дЧисло2, сч, 1) = "1")), "1", "0")	
		
	КонецЦикла;
	
	Возврат ДесятичноеПредставлениеДвоичногоЧисла(Результат, Беззнаковое);
	
КонецФункции

// Функция - Побитовое НЕ (Аналог ~ в js)
//
// Параметры:
//  Число		 - Число - Целое Число над которым выполняется операция (Поддерживаются операции над отрицательными числами)
//  Разрядность	 - Число - Число байт для представления числа 
//  Беззнаковое	 - Булево - Требуется учитывать знак числа 
// 
// Возвращаемое значение:
// Число  -  Результат операции
Функция пНе(Число, Разрядность = 32, Беззнаковое = Истина) Экспорт 
	
	дЧисло = ДвоичноеПредставлениеДесятичногоЧисла(Число, Разрядность);
			
	Результат = "";
	
	Для сч = 1 по Разрядность Цикл
		
		Результат = Результат + ?(Сред(дЧисло, сч, 1) = "1", "0", "1");	
		
	КонецЦикла;
	
	Возврат ДесятичноеПредставлениеДвоичногоЧисла(Результат, Беззнаковое);
	
КонецФункции

#КонецОбласти
///////////////////////////////////////////////////////////////////////////////////

#КонецОбласти
////////////////////////////////////////////////////////////////////////////////////
