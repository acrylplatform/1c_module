///////////////////////////////////////////////////////////////////////////////////
// Модуль - HTTP Клиент Сервер
//
// MIT License Copyright (c) 2020 AcrylPlatform.
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights 
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell 
// copies of the Software, and to permit persons to whom the Software 
// is furnished to do so, subject to the following conditions:
// The above copyright notice and this permission notice shall be 
// included in all copies or substantial portions of the Software.
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
// EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, 
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT 
// SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, 
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, 
// ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE 
// OR OTHER DEALINGS IN THE SOFTWARE.
//
///////////////////////////////////////////////////////////////////////////////////

 ////////////////////////////////////////////////////////////////////////////////////
#Область ПрограммныйИнтерфейс

// ВызватьHTTPМетод
 //
 // Параметры:
 //  <HTTPМетод>  - Строка, содержащая имя HTTP-метода для запроса ("POST"."PATCH", "PUT" ,"GET","DELETE"
 //  <HTTPСоединение>  - объект HTTPСоединение
 //  <АдресРесурса>  - Строка http-ресурса, к которому будет отправлен HTTP запрос.
 //  <ОтправляемыеДанные>  - Структура или соответствие, содержащие данные, отправляемые на указанный адрес   
 //                          с использованием указанного HTTP-метода "POST" или "PATCH" или  "PUT" 
 // Возвращаемое значение:
 //   Структура ответа сервера в зависимости от HTTPМетод
 //
Функция ВызватьHTTPМетод(HTTPМетод, HTTPСоединение = Неопределено, АдресРесурса, 
	 ОтправляемыеДанные = Неопределено, АдресРезультата = Неопределено,
	 АдресHTTPСоеденения = Неопределено, Защищеное = Ложь) Экспорт
	 
	 
	Если АдресHTTPСоеденения <> Неопределено 
 	И    HTTPСоединение = Неопределено Тогда 
		 
		HTTPСоединение = AP_HTTPКлиентСервер.ПолучитьHTTPСоеденение(АдресHTTPСоеденения, Защищеное);
		
	КонецЕсли;
	 
	Заголовки = Новый Соответствие();
	Заголовки.Вставить("Content-Type", "application/json");
	ЗапросHTTP = Новый HTTPЗапрос( АдресРесурса, Заголовки);
	
	
	Если HTTPМетод = "POST" ИЛИ HTTPМетод = "PATCH" 
	ИЛИ  HTTPМетод = "PUT"  ИЛИ HTTPМетод = "DELETE" Тогда
	
		Если ТипЗнч(ОтправляемыеДанные) <> ТипЗнч("") Тогда 
			
			#Если ВебКлиент Тогда
				
				СтрокаДляТела = AP_SerializerВызовСервера.СериализоватьВJSON(ОтправляемыеДанные);	
					
			#Иначе
				
				ЗаписьJSON = Новый ЗаписьJSON;
				ЗаписьJSON.УстановитьСтроку();
				ЗаписатьJSON(ЗаписьJSON, ОтправляемыеДанные);

				СтрокаДляТела = ЗаписьJSON.Закрыть();
				
			#КонецЕсли
		Иначе
			
			СтрокаДляТела = ОтправляемыеДанные;
			
		КонецЕсли;
		
		ЗапросHTTP.УстановитьТелоИзСтроки(СтрокаДляТела, КодировкаТекста.UTF8);
		
	КонецЕсли;
	
	Если ОтправляемыеДанные <> Неопределено И HTTPМетод = "GET" Тогда
		
		ЗапросHTTP.АдресРесурса	= ЗапросHTTP.АдресРесурса +"?";
		
		Для Каждого КлючИЗначение Из ОтправляемыеДанные Цикл
			
			ЗапросHTTP.АдресРесурса = ЗапросHTTP.АдресРесурса +
									КлючИЗначение.Ключ + "=" + КлючИЗначение.Значение + "&";
									
		КонецЦикла;
								
		ЗапросHTTP.АдресРесурса = Лев(ЗапросHTTP.АдресРесурса, СтрДлина(ЗапросHTTP.АдресРесурса) - 1);						
		
	КонецЕсли;
	
	ОтветHTTP = HTTPСоединение.ВызватьHTTPМетод(HTTPМетод, ЗапросHTTP);
	
	СтруктураОтвета = Новый Структура;
	СтруктураОтвета.Вставить("КодСостояния", ОтветHTTP.КодСостояния);
	
	ОтветСервера = ОтветHTTP.ПолучитьТелоКакСтроку("UTF-8");
	
	СтруктураОтвета.Вставить("ОтветСервераНеРасшифрованный", ОтветСервера);
	
	Попытка
		
		#Если ВебКлиент Тогда
		
			Соответствие = AP_SerializerВызовСервера.ПрочитатьJSONНаСервере(ОтветСервера);	   
			СтруктураОтвета.Вставить("ОтветСервера", Соответствие);
			 
		#Иначе
			
			ЧтениеJSON = Новый ЧтениеJSON;    
		    ЧтениеJSON.УстановитьСтроку(ОтветСервера);
		    Соответствие = ПрочитатьJSON(ЧтениеJSON, Истина);
		    СтруктураОтвета.Вставить("ОтветСервера", Соответствие);	
			
		#КонецЕсли
		
	Исключение
		
		СтруктураОтвета.Вставить("ОтветСервера", Неопределено);
		
	КонецПопытки;
	
	Если АдресРезультата <> Неопределено Тогда 
		
		ПоместитьВоВременноеХранилище(СтруктураОтвета, АдресРезультата);
		
	КонецЕсли;

	Возврат СтруктураОтвета;
КонецФункции // ВызватьHTTPМетодНаСервере()

// Функция - Получить HTTPСоедение
//
// Параметры:
//  АдресРесурса	 - Строка - Адрес ресурса
//  ИспользоватьSSL	 - Булево - Использовать HHTPS
// 
// Возвращаемое значение:
// HTTPСоединение  - HTTPСоединение с указаным ресурсом
//
Функция ПолучитьHTTPСоеденение(АдресРесурса, ИспользоватьSSL = Ложь) Экспорт 
	
	Если ИспользоватьSSL Тогда 
	
		ssl = Новый ЗащищенноеСоединениеOpenSSL(Неопределено, Неопределено); 
			
	Иначе
		
		ssl = Неопределено;
		
	КонецЕсли;
		
	HTTPСоединение = Новый HTTPСоединение(АдресРесурса, , , , , 30, ssl);
	
	Возврат HTTPСоединение;
	
КонецФункции

#КонецОбласти
////////////////////////////////////////////////////////////////////////////////////